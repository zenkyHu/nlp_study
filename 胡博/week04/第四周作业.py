#week3作业
#词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改
Dict = {"经常":0.1,
        "经":0.05,
        "有":0.1,
        "常":0.001,
        "有意见":0.1,
        "歧":0.001,
        "意见":0.2,
        "分歧":0.2,
        "见":0.05,
        "意":0.05,
        "见分歧":0.05,
        "分":0.1}

#待切分文本
sentence = "经常有意见分歧"

#实现全切分函数，输出根据字典能够切分出的所有的切分方式
def all_cut(sentence, Dict):
    n = len(sentence)
    target = []  # 存储所有可能的切分结果

    # 递归函数，用于尝试所有可能的切分方式
    def backtrack(start, path):
        if start == n:  # 如果已经到达句子的末尾，记录当前路径
            target.append(path[:])  # 添加当前路径的副本到结果中
            return
        for end in range(start + 1, n + 1):
            word = sentence[start:end]
            if word in Dict:  # 如果当前词在字典中
                # 检查当前词是否已经在路径中出现过
                if not any(word.startswith(p) and len(word) > len(p) for p in path):
                    backtrack(end, path + [word])  # 继续递归切分后面的部分

    backtrack(0, [])  # 从句子的开始位置开始递归
    return target


# 调用函数
target = all_cut(sentence, Dict)
print(target)

#目标输出;顺序不重要
target = [
    ['经常', '有意见', '分歧'],
    ['经常', '有意见', '分', '歧'],
    ['经常', '有', '意见', '分歧'],
    ['经常', '有', '意见', '分', '歧'],
    ['经常', '有', '意', '见分歧'],
    ['经常', '有', '意', '见', '分歧'],
    ['经常', '有', '意', '见', '分', '歧'],
    ['经', '常', '有意见', '分歧'],
    ['经', '常', '有意见', '分', '歧'],
    ['经', '常', '有', '意见', '分歧'],
    ['经', '常', '有', '意见', '分', '歧'],
    ['经', '常', '有', '意', '见分歧'],
    ['经', '常', '有', '意', '见', '分歧'],
    ['经', '常', '有', '意', '见', '分', '歧']
]
